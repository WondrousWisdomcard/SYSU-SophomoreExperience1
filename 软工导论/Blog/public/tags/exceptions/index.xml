<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exceptions on Wondrous WindomCard&#39;s Blog</title>
    <link>https://wondrouswisdomcard.gitee.io/tags/exceptions/</link>
    <description>Recent content in Exceptions on Wondrous WindomCard&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Thu, 12 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wondrouswisdomcard.gitee.io/tags/exceptions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java - The Learning Experience 4</title>
      <link>https://wondrouswisdomcard.gitee.io/posts/java4/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wondrouswisdomcard.gitee.io/posts/java4/</guid>
      <description>Exceptions 异常处理  三种类型的异常： 检查性异常：最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。例如：SQLException, IOException, FileNotFoundException
运行时异常： 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。例如：ArithmeticException, ClassCastException, ArrayIndexOutOfBoundsException, NullPointerException
错误： 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查不到的。例如：System malfunction, OutOfMemoryException, StackOverflowError
理解： 1、检查性异常: 不处理编译不能通过 2、非检查性异常:不处理编译可以通过，如果有抛出直接抛到控制台 3、运行时异常: 就是非检查性异常 4、非运行时异常: 就是检查性异常
 Exception 类的层次 所有的异常类是从 java.lang.Exception 类继承的子类。 Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error。 Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。 Error 用来指示运行时环境发生的错误。
 Java 内置异常类和方法 链接：https://www.runoob.com/java/java-exceptions.html  关键字 try catch throw finally throws / throw 如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。
也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的,多个异常之间用逗号隔开。 下面方法的声明抛出一个 RemoteException 异常：
import java.io.*;public class className{public void deposit(double amount) throws RemoteException{// Method implementationthrow new RemoteException();}//Remainder of class definition} finally 关键字用来创建在 try 代码块后面执行的代码块。 无论是否发生异常，finally 代码块中的代码总会被执行。 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。 finally 代码块出现在 catch 代码块最后。</description>
    </item>
    
  </channel>
</rss>